Index: compiler/org/eclipse/jdt/internal/compiler/ast/BinaryExpression.java
===================================================================
RCS file: /cvsroot/eclipse/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/BinaryExpression.java,v
retrieving revision 1.68
diff -c -r1.68 BinaryExpression.java
*** compiler/org/eclipse/jdt/internal/compiler/ast/BinaryExpression.java	26 Nov 2008 17:56:55 -0000	1.68
--- compiler/org/eclipse/jdt/internal/compiler/ast/BinaryExpression.java	2 Nov 2010 21:57:57 -0000
***************
*** 116,121 ****
--- 116,128 ----
  		codeStream.recordPositionsFrom(pc, this.sourceStart);
  		return;
  	}
+ 	if (this.overloadMethod != null) {
+ 		this.overloadMethod.generateCode(currentScope, codeStream, valueRequired);
+ 		if (valueRequired)
+ 			codeStream.generateImplicitConversion(this.implicitConversion);
+ 		codeStream.recordPositionsFrom(pc, this.sourceStart);
+ 		return;
+ 	}
  	switch ((this.bits & ASTNode.OperatorMASK) >> ASTNode.OperatorSHIFT) {
  		case PLUS :
  			switch (this.bits & ASTNode.ReturnTypeIDMASK) {
***************
*** 1788,1793 ****
--- 1795,1861 ----
  	return this.right.printExpression(0, output);
  }
  
+ final static java.util.Map binaryOperators = new java.util.HashMap() {{
+ 	put("+", "add");
+ 	put("-", "substract");
+ 	put("*", "multiply");
+ 	put("/", "divide");
+ 	put("%", "remainder");
+ 	put("&", "and");
+ 	put("|", "or");
+ 	put("^", "xor");
+ 	put("<<", "shiftLeft");
+ 	put(">>", "shiftRight");
+ 	put("<", "compareTo");
+ 	put(">", "compareTo");
+ 	put("<=", "compareTo");
+ 	put(">=", "compareTo");
+ }};
+ MessageSend overloadMethod;
+ public static TypeBinding overloadBinaryOperator(BinaryExpression that, BlockScope scope) {
+ 	// try operator overloading
+ 	String op = that.operatorToString();
+ 	String method = (String) binaryOperators.get(op);
+ 	if (method != null) {
+ 		// find method
+ 		MessageSend ms = new MessageSend();
+ 		ms.receiver = that.left;
+ 		ms.selector = method.toCharArray();
+ 		ms.arguments = new Expression[]{that.right};
+ 		ms.actualReceiverType = that.left.resolvedType;
+ 		ms.binding = scope.getMethod(that.left.resolvedType, ms.selector, new TypeBinding[]{that.right.resolvedType}, ms);
+ 		if (ms.binding != null) { // found
+ 			ms.resolvedType = ms.binding.returnType;
+ 			ms.constant = Constant.NotAConstant;
+ 			ms.sourceStart = that.sourceStart;
+ 			ms.sourceEnd = that.sourceEnd;
+ 			that.constant = Constant.NotAConstant;
+ 			if ("compareTo".equals(method)) {
+ 				// rewrite to `left.compareTo(right) </> 0`
+ 				that.left = ms;
+ 				that.right = new IntLiteral("0".toCharArray(), that.sourceStart, that.sourceEnd, 0);
+ 				that.right.resolve(scope);
+ 				int leftTypeID = that.left.resolvedType.id;
+ 				int rightTypeID = that.right.resolvedType.id;
+ 				if (leftTypeID == rightTypeID) { // if compareTo really returns int
+ 					// resolve rest info about `left </> 0`
+ 					int operator = (that.bits & ASTNode.OperatorMASK) >> ASTNode.OperatorSHIFT;
+ 					int operatorSignature = OperatorExpression.OperatorSignatures[operator][(leftTypeID << 4) + rightTypeID];
+ 					that.left.computeConversion(scope, TypeBinding.wellKnownType(scope, (operatorSignature >>> 16) & 0x0000F), that.left.resolvedType);
+ 					that.right.computeConversion(scope, TypeBinding.wellKnownType(scope, (operatorSignature >>> 8) & 0x0000F), that.right.resolvedType);
+ 					that.bits |= operatorSignature & 0xF;
+ 					that.computeConstant(scope, leftTypeID, rightTypeID);
+ 					return that.resolvedType = TypeBinding.BOOLEAN;
+ 				}
+ 			} else {
+ 				that.overloadMethod = ms;
+ 				return that.resolvedType = ms.resolvedType = ms.binding.returnType;
+ 			}
+ 		}
+ 	}
+ 	return null;
+ }
+ 
  public TypeBinding resolveType(BlockScope scope) {
  	// keep implementation in sync with CombinedBinaryExpression#resolveType
  	// and nonRecursiveResolveTypeUpwards
***************
*** 1824,1829 ****
--- 1892,1900 ----
  		} else if (rightTypeID == TypeIds.T_JavaLangString) {
  			leftTypeID = TypeIds.T_JavaLangObject;
  		} else {
+ 			TypeBinding res = overloadBinaryOperator(this, scope);
+ 			if (res != null)
+ 				return res;
  			this.constant = Constant.NotAConstant;
  			scope.problemReporter().invalidOperator(this, leftType, rightType);
  			return null;
Index: compiler/org/eclipse/jdt/internal/compiler/ast/UnaryExpression.java
===================================================================
RCS file: /cvsroot/eclipse/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/UnaryExpression.java,v
retrieving revision 1.55
diff -c -r1.55 UnaryExpression.java
*** compiler/org/eclipse/jdt/internal/compiler/ast/UnaryExpression.java	6 Oct 2009 13:18:02 -0000	1.55
--- compiler/org/eclipse/jdt/internal/compiler/ast/UnaryExpression.java	2 Nov 2010 21:57:58 -0000
***************
*** 71,76 ****
--- 71,83 ----
  			codeStream.recordPositionsFrom(pc, this.sourceStart);
  			return;
  		}
+ 		if (this.overloadMethod != null) {
+ 			this.overloadMethod.generateCode(currentScope, codeStream, valueRequired);
+ 			if (valueRequired)
+ 				codeStream.generateImplicitConversion(this.implicitConversion);
+ 			codeStream.recordPositionsFrom(pc, this.sourceStart);
+ 			return;
+ 		}
  		switch ((this.bits & OperatorMASK) >> OperatorSHIFT) {
  			case NOT :
  				switch ((this.expression.implicitConversion & IMPLICIT_CONVERSION_MASK) >> 4) /* runtime type */ {
***************
*** 205,210 ****
--- 212,243 ----
  		return this.expression.printExpression(0, output);
  	}
  
+ 	static java.util.Map unaryOperators = new java.util.HashMap() {{
+ 		put("-", "negate");
+ 		put("~", "not");
+ 	}};
+ 	MessageSend overloadMethod;
+ 	public static TypeBinding overloadUnaryOperator(UnaryExpression that, BlockScope scope) {
+ 		// similar to #overloadBinaryOperator
+ 		String method = (String) unaryOperators.get(that.operatorToString());
+ 		if (method != null) {
+ 			// find method
+ 			MessageSend ms = new MessageSend();
+ 			ms.receiver = that.expression;
+ 			ms.selector = method.toCharArray();
+ 			ms.arguments = new Expression[0];
+ 			ms.actualReceiverType = that.expression.resolvedType;
+ 			ms.constant = Constant.NotAConstant;
+ 			ms.binding = scope.getMethod(that.expression.resolvedType, ms.selector, new TypeBinding[0], ms);
+ 			if (ms.binding != null) {
+ 				that.overloadMethod = ms;
+ 				that.constant = Constant.NotAConstant;
+ 				return that.resolvedType = ms.resolvedType = ms.binding.returnType;
+ 			}
+ 		}
+ 		return null;
+ 	}
+ 
  	public TypeBinding resolveType(BlockScope scope) {
  		boolean expressionIsCast;
  		if ((expressionIsCast = this.expression instanceof CastExpression) == true) this.expression.bits |= DisableUnnecessaryCastCheck; // will check later on
***************
*** 222,227 ****
--- 255,263 ----
  			}
  		}
  		if (expressionTypeID > 15) {
+ 			TypeBinding res = overloadUnaryOperator(this, scope);
+ 			if (res != null)
+ 				return res;
  			this.constant = Constant.NotAConstant;
  			scope.problemReporter().invalidOperator(this, expressionType);
  			return null;
