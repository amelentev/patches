diff -crB org.eclipse.jdt.core.origin/compiler/org/eclipse/jdt/internal/compiler/ast/BinaryExpression.java org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/BinaryExpression.java
*** org.eclipse.jdt.core.origin/compiler/org/eclipse/jdt/internal/compiler/ast/BinaryExpression.java	2010-10-11 22:31:49.423000884 +0600
--- org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/BinaryExpression.java	2010-09-21 17:44:00.115000031 +0600
***************
*** 10,15 ****
--- 10,18 ----
   *******************************************************************************/
  package org.eclipse.jdt.internal.compiler.ast;
  
+ import java.util.HashMap;
+ import java.util.Map;
+ 
  import org.eclipse.jdt.internal.compiler.ASTVisitor;
  import org.eclipse.jdt.internal.compiler.impl.*;
  import org.eclipse.jdt.internal.compiler.classfmt.ClassFileConstants;
***************
*** 116,121 ****
--- 119,132 ----
  		codeStream.recordPositionsFrom(pc, this.sourceStart);
  		return;
  	}
+ 	if (this.overloadMethod != null) {
+ 		this.overloadMethod.generateCode(currentScope, codeStream, valueRequired);
+ 		if (valueRequired) {
+ 			codeStream.generateImplicitConversion(this.implicitConversion);
+ 		}
+ 		codeStream.recordPositionsFrom(pc, this.sourceStart);
+ 		return;
+ 	}
  	switch ((this.bits & ASTNode.OperatorMASK) >> ASTNode.OperatorSHIFT) {
  		case PLUS :
  			switch (this.bits & ASTNode.ReturnTypeIDMASK) {
***************
*** 1788,1793 ****
--- 1799,1813 ----
  	return this.right.printExpression(0, output);
  }
  
+ static Map operatorMethods = new HashMap() {{
+ 	put("+", "add");
+ 	put("-", "substract");
+ 	put("*", "multiply");
+ 	put("/", "divide");
+ 	put("%", "remainder");
+ }};
+ MessageSend overloadMethod;
+ 
  public TypeBinding resolveType(BlockScope scope) {
  	// keep implementation in sync with CombinedBinaryExpression#resolveType
  	// and nonRecursiveResolveTypeUpwards
***************
*** 1824,1829 ****
--- 1844,1864 ----
  		} else if (rightTypeID == TypeIds.T_JavaLangString) {
  			leftTypeID = TypeIds.T_JavaLangObject;
  		} else {
+ 			// try operator overloading
+ 			String method = (String) operatorMethods.get(this.operatorToString());
+ 			if (method != null) {
+ 				MessageSend ms = new MessageSend();
+ 				ms.arguments = new Expression[]{this.right};
+ 				ms.receiver = this.left;
+ 				ms.actualReceiverType = leftType;
+ 				ms.selector = method.toCharArray();
+ 				ms.binding = scope.getMethod(leftType, ms.selector, new TypeBinding[]{rightType}, ms);
+ 				if (ms.binding != null) {
+ 					this.overloadMethod = ms;
+ 					this.constant = Constant.NotAConstant;
+ 					return this.resolvedType = ms.resolvedType = ms.binding.returnType;
+ 				}
+ 			}
  			this.constant = Constant.NotAConstant;
  			scope.problemReporter().invalidOperator(this, leftType, rightType);
  			return null;
