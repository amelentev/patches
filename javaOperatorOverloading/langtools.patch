diff -r 27f03394a69d src/share/classes/com/sun/tools/javac/comp/Lower.java
--- a/src/share/classes/com/sun/tools/javac/comp/Lower.java	Wed Jun 23 16:44:15 2010 -0700
+++ b/src/share/classes/com/sun/tools/javac/comp/Lower.java	Tue Nov 02 22:00:59 2010 +0500
@@ -2784,6 +2784,20 @@
     }
 
     public void visitUnary(JCUnary tree) {
+        if (tree.operator instanceof OperatorSymbol) {
+            // similar to #visitBinary
+            OperatorSymbol os = (OperatorSymbol) tree.operator;
+            if (os.opcode == ByteCodes.error+1) {
+                MethodSymbol ms = (MethodSymbol) os.owner;
+                JCFieldAccess meth = make.Select(tree.arg, ms.name);
+                meth.type = ms.type;
+                meth.sym = ms;
+                result = make.Apply(null, meth, List.<JCExpression>nil())
+                        .setType(tree.type);
+                result = translate(result);
+                return;
+            }
+        }
         boolean isUpdateOperator =
             JCTree.PREINC <= tree.getTag() && tree.getTag() <= JCTree.POSTDEC;
         if (isUpdateOperator && !tree.arg.type.isPrimitive()) {
@@ -2828,6 +2842,28 @@
     }
 
     public void visitBinary(JCBinary tree) {
+        if (tree.operator instanceof OperatorSymbol) {
+            OperatorSymbol os = (OperatorSymbol) tree.operator;
+            if (os.opcode == ByteCodes.error+1) { // if operator overloading?
+                MethodSymbol ms = (MethodSymbol) os.owner;
+                // construct method invocation ast
+                JCFieldAccess meth = make.Select(tree.lhs, ms.name);
+                meth.type = ms.type;
+                meth.sym = ms;
+                result = make.Apply(null, meth, List.of(tree.rhs))
+                        .setType( ((MethodType)ms.type).restype ); // tree.type may be != ms.type.restype. see below
+                if (ms.name.contentEquals("compareTo")) {
+                    // rewrite to `left.compareTo(right) </> 0`
+                    JCLiteral zero = make.Literal(0);
+                    JCBinary r = make.Binary(tree.getTag(), (JCExpression) result, zero);
+                    r.type = syms.booleanType;
+                    r.operator = rs.resolveBinaryOperator(make_pos, tree.getTag(), attrEnv, result.type, zero.type);
+                    result = r;
+                }
+                result = translate(result);
+                return;
+            }
+        }
         List<Type> formals = tree.operator.type.getParameterTypes();
         JCTree lhs = tree.lhs = translate(tree.lhs, formals.head);
         switch (tree.getTag()) {
diff -r 27f03394a69d src/share/classes/com/sun/tools/javac/comp/Resolve.java
--- a/src/share/classes/com/sun/tools/javac/comp/Resolve.java	Wed Jun 23 16:44:15 2010 -0700
+++ b/src/share/classes/com/sun/tools/javac/comp/Resolve.java	Tue Nov 02 22:00:59 2010 +0500
@@ -769,9 +769,52 @@
                     bestSoFar = concrete;
             }
         }
+        if (bestSoFar.kind >= ERR && operator) { // try operator overloading
+            String opname = null;
+            List<Type> args = List.nil();
+            if (argtypes.size() == 2) {
+                opname = binaryOperators.get(name.toString());
+                args = List.of(argtypes.get(1));
+            } else if (argtypes.size() == 1)
+                opname = unaryOperators.get(name.toString());
+            if (opname != null) {
+                Symbol method = findMethod(env, argtypes.get(0), names.fromString(opname), 
+                        args, null, false, false, false);
+                if (method.kind == Kinds.MTH) {
+                    bestSoFar = new OperatorSymbol(method.name, method.type, ByteCodes.error+1, method);
+                    if ("compareTo".equals(opname)) { // change result type to boolean if </>
+                        MethodType oldmt = (MethodType) method.type;
+                        bestSoFar.type = new Type.MethodType(oldmt.argtypes, syms.booleanType, oldmt.thrown, oldmt.tsym);
+                    }
+                }
+            }
+        }
         return bestSoFar;
     }
 
+    @SuppressWarnings("serial")
+    java.util.Map<String, String> binaryOperators = new java.util.HashMap<String, String>() {{
+        put("+", "add");
+        put("-", "subtract");
+        put("*", "multiply");
+        put("/", "divide");
+        put("%", "remainder");
+        put("&", "and");
+        put("|", "or");
+        put("^", "xor");
+        put("<<", "shiftLeft");
+        put(">>", "shiftRight");
+        put("<", "compareTo");
+        put(">", "compareTo");
+        put("<=", "compareTo");
+        put(">=", "compareTo");
+    }};
+    @SuppressWarnings("serial")
+    java.util.Map<String, String> unaryOperators = new java.util.HashMap<String, String>() {{
+        put("-", "negate");
+        put("~", "not");
+    }};
+
     /** Find unqualified method matching given name, type and value arguments.
      *  @param env       The current environment.
      *  @param name      The method's name.
